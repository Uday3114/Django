# Normal Function():
-------------------

def fun1():
    num = 1
    return num
    print(num)
    num = 2
    return num
print(fun1())


print("=================")

# Generator Function():
----------------------

def fun2():
    num = 1
    yield num
    print(num)
    num = 2
    yield num
f = fun2()
print(next(f))
print(next(f))

Output:

1
=================
1
1
2
>>>

=========================================================

# Normal Function():
-------------------

def fun1():
    num = [1,2,3,4,5]
    sqr_lst = []
    for i in num:
        sqr_lst.append(i**2)
    return sqr_lst
print(fun1())

print("=================")

# Generator Function():
----------------------

def fun2():
    num = [1,2,3,4,5]
    for i in num:
        yield i**2

f = fun2()
print(next(f))
print(next(f))
print(next(f))
print(next(f))
print(next(f))

Output:

[1, 4, 9, 16, 25]
=================
1
4
9
16
25
>>>
===========================================================
# Generator Expression:
----------------------

num = [1,2,3,4,5]
n = (i**2 for i in num)
for i in n:
    print(i)

Output:

1
4
9
16
25
>>> 


==================================================

# Fibonacci using Generator:
---------------------------

from itertools import islice

class Fibo():
    def __init__(self):
        self.prev = 0
        self.curr = 1

    def fun(self):
        while True:
            temp = self.curr
            self.curr = self.prev + self.curr
            self.prev = temp

            yield self.curr
f = Fibo()
g = f.fun()
for i in islice(g,0,21):
    print(i)

Output:

1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 , 233 , 377 , 610 , 987 , 1597 , 2584 , 4181 , 6765 , 10946 , 17711 , 
>>> 

========================================================
# A simple generator function:
------------------------------

def my_gen():
    n = 1
    print('This is printed first')
    # Generator function contains yield statements
    yield n

    n += 1
    print('This is printed second')
    yield n

    n += 1
    print('This is printed at last')
    yield n


# Using for loop

for item in my_gen():
    print(item)

Output:

This is printed first
1
This is printed second
2
This is printed at last
3
>>> 
==============================================================

# Python Generator with Loop:
----------------------------

def rev_str(my_str):
    length = len(my_str)
    for i in range(length - 1, -1, -1):
        yield my_str[i]


# For loop to reverse the string

for char in rev_str("hello"):
    print(char,end=" ")

Output:

o l l e h 
>>> 

==========================================================

# Python Generator Expression:
-----------------------------

# Initialize the list
my_list = [1, 3, 6, 10]

# square each term using list comprehension
list_ = [x**2 for x in my_list]

# same thing can be done using a generator expression
# generator expressions are surrounded by parenthesis ()
generator = (x**2 for x in my_list)

print(list_)
print(generator)

Output:

[1, 9, 36, 100]
<generator object <genexpr> at 0x000002A4DC7A1F20>
>>> 
=============================================================

# Initialize the list

my_list = [1, 3, 6, 10]

a = (x**2 for x in my_list)
print(next(a))

print(next(a))

print(next(a))

print(next(a))

next(a)

Output:
1
9
36
100
Traceback (most recent call last):
  File "C:/Users/um21095/Documents/oop.py", line 13, in <module>
    next(a)
StopIteration
>>> 
=========================================================================

# Initialize the list

my_list = [1, 3, 6, 10]

a = sum(x**2 for x in my_list)
print(a)

b = max(x**2 for x in my_list)
print(b)

Output:
146
100
>>> 
=======================================================
Use of Python Generators:
-------------------------
1. Easy to Implement:
---------------------
#Lengthy using Normal Function:

class PowTwo:
    def __init__(self, max=0):
        self.n = 0
        self.max = max

    def __iter__(self):
        return self

    def __next__(self):
        if self.n > self.max:
            raise StopIteration

        result = 2 ** self.n
        self.n += 1
        return result

#By Using Generator:
--------------------

def PowTwoGen(max=0):
    n = 0
    while n < max:
        yield 2 ** n
        n += 1
-----------------------------------------------------
2. Memory Efficient:
--------------------

A normal function to return a sequence will create the entire sequence in memory before returning the result.
This is an overkill, if the number of items in the sequence is very large.

Generator implementation of such sequences is memory friendly and is preferred since it only produces one item at a time.

-----------------------------------------------------

3. Represent Infinite Stream:
-----------------------------

def all_even():
    n = 0
    while True:
        yield n
        n += 2

----------------------------------------------------------------------
4. Pipelining Generators:
-------------------------

Multiple generators can be used to pipeline a series of operations. 
This is best illustrated using an example.

Suppose we have a generator that produces the numbers in the Fibonacci series. 
And we have another generator for squaring numbers.

If we want to find out the sum of squares of numbers in the Fibonacci series,
we can do it in the following way by pipelining the output of generator functions together.


def fibonacci_numbers(nums):
    x, y = 0, 1
    for _ in range(nums):
        x, y = y, x+y
        yield x

def square(nums):
    for num in nums:
        yield num**2

print(sum(square(fibonacci_numbers(10))))

Output:
4895
>>> 





